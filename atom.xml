<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hamaco's blog]]></title>
  <link href="http://hamaco.github.com/atom.xml" rel="self"/>
  <link href="http://hamaco.github.com/"/>
  <updated>2013-06-25T11:33:47+09:00</updated>
  <id>http://hamaco.github.com/</id>
  <author>
    <name><![CDATA[hamaco]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mr.Reader の Theme を変更した]]></title>
    <link href="http://hamaco.github.com/blog/2013/06/19/change-mr-reader-theme/"/>
    <updated>2013-06-19T19:46:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/06/19/change-mr-reader-theme</id>
    <content type="html"><![CDATA[<p>久し振りに Mr. Reader の テーマ一覧ページを見に行ったら、今使ってる Mr. Reminder Dark をベースにした Chad&#8217;s Perfect RSS というテーマがあったのでテーマを変更してみた。</p>

<p>ちなみに見た目はこんな感じに変わった。</p>

<p><a href="http://www.flickr.com/photos/hamaco/9073953993" target="_blank"><img src="http://farm4.staticflickr.com/3775/9073953993_6ddc8fde9b.jpg" title="Mr Reader - Chad's Perfect RSS" /></a></p>

<p>↓</p>

<p><a href="http://www.flickr.com/photos/hamaco/9076183152" target="_blank"><img src="http://farm4.staticflickr.com/3778/9076183152_8413cb085a.jpg" title="Mr Reader - Mr. Reminder Dark" /></a></p>

<p>既読・未読の区別が背景色でなく文字色で区別つけるようになったのが一番の違いかな?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Casual Talks Vol.1 に参加してきた]]></title>
    <link href="http://hamaco.github.com/blog/2013/04/16/chef-casual-talks-vol1/"/>
    <updated>2013-04-16T20:00:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/04/16/chef-casual-talks-vol1</id>
    <content type="html"><![CDATA[<p>Chef の Casual なイベントがあったので参加してきました。</p>

<h2>久し振りのLT</h2>

<p>普段勉強会であんまり発表しないのですが、今回のイベントは発表必須だったので、最近ちょこちょこやり始めた Mac の開発環境を chef で管理している話を話してきました。</p>

<p>スライドとかまともなの作ってなくて公開できないので、発表の時に使った cookbook を公開。</p>

<p><a href="https://github.com/hamaco/chef-hamacbook">hamaco/chef-hamacbook · GitHub</a></p>

<p>多分 Ruby が入ってて rake コマンドが使えれば動くと思いますが、ある程度環境構築済みの状態からしか使った事がないのでもしかしたら何か足りなかったりするかも……</p>

<p>あと、完全に自分の使い易い環境構築するだけなので実行して後悔してもしりません。</p>

<h2>感想</h2>

<ul>
<li>Casual っていうから軽い感じなのかと思いきや内容だいぶ濃かった</li>
<li>ピザでてくると思ってたのに弁当でてきてビックリ

<ul>
<li>勉強会とかってピザ多いからピザ以外のがでてくるとなんとなく嬉しいよね</li>
</ul>
</li>
<li>発表したおかげで嵌ってた箇所が1箇所解決した

<ul>
<li>ついでに会話中に1個 TODO 気付いた</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近のiPad]]></title>
    <link href="http://hamaco.github.com/blog/2013/02/16/recent-ipad/"/>
    <updated>2013-02-16T23:25:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/02/16/recent-ipad</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/hamaco/8479084770" target="_blank"><img src="http://farm9.staticflickr.com/8102/8479084770_3f6fbedaba.jpg" title="recent-ipad-01" /></a></p>

<ul>
<li>キーボードの右下にある切り替えキーが地味に便利</li>
<li>Mr. Reader からはてブできるように設定した</li>
<li>メインのカレンダーアプリを Calendars に変えた</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CakePHP のヘルパー設定で嵌った件]]></title>
    <link href="http://hamaco.github.com/blog/2013/02/15/cakephp-trap/"/>
    <updated>2013-02-15T00:00:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/02/15/cakephp-trap</id>
    <content type="html"><![CDATA[<p>CakePHP 1.3で作られたウェブサービスをメンテナンスしてるのですが、先日ヘルパー部分でハマってしまったのでメモかねてエントリ。</p>

<p>まず前提として、<code>cake/libs/controller/controller.php</code> の <code>__mergeVars()</code> を見ると分かるのですが、CakePHP はヘルパーとかを AppController と現在のコントローラーのプロパティをマージして使ってます。</p>

<p>なので例えば以下のように書けば Hoge と Fuga の2つのヘルパーが読み込まれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="k">extends</span> <span class="nx">AppController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nv">$helpers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Hoge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AppController</span> <span class="k">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nv">$helpers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Fuga&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、ここで私が1つ勘違いしていたことがあって、私は AppController に書いたやつと現在のコントローラーに書いたやつ「だけ」が読み込まれると思っていました。<br/>
以下のように AppController に helpers プロパティがなかったら Hoge の1つだけが読み込まれると思っていたわけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="k">extends</span> <span class="nx">AppController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nv">$helpers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Hoge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AppController</span> <span class="k">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、実際は AppController の親クラスである Controller の helpers プロパティでいくつか設定されてるので、 Hoge, Session, Html, Form の4つのヘルパーが読み込まれるんですね。<br/>
これを知らなくて、 AppController に Fuga とだけ書いて暫く嵌ってしまいましたとさ。ちゃんちゃん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CandyCaneのチケットの担当者を関係者のみに絞り込むプラグイン作った]]></title>
    <link href="http://hamaco.github.com/blog/2013/02/14/candycane-assign-narrowdown/"/>
    <updated>2013-02-14T16:32:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/02/14/candycane-assign-narrowdown</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/nazoking/20110714/1310620770">Redmineのチケットの担当者を関係者のみに絞り込むプラグイン</a>と言う素敵なプラグインがあるらしいのですが、これがCandyCane に対応してなかったので CandyCane 版のチケットの担当者を関係者のみに絞り込むプラグインを作りました。</p>

<h2>インストール方法</h2>

<p>近いうちに普通に CandyCane の管理画面からプラグインインストールでいけるようになると思います。</p>

<p>(追記：2013-02-14 17:25) pull request がマージされたのでインストールできるようになりました。</p>

<h2>デモ</h2>

<p>これが</p>

<p><a href="http://www.flickr.com/photos/hamaco/8472036309" target="_blank"><img src="http://farm9.staticflickr.com/8250/8472036309_906443d111.jpg" title="candycane-assign-narrowdown-01" /></a></p>

<p>こうなる</p>

<p><a href="http://www.flickr.com/photos/hamaco/8473127348" target="_blank"><img src="http://farm9.staticflickr.com/8517/8473127348_7df7976910.jpg" title="candycane-assign-narrowdown-02" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sequel Pro でも C-h がしたい！]]></title>
    <link href="http://hamaco.github.com/blog/2013/02/13/sequelpro-c-h/"/>
    <updated>2013-02-13T20:17:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/02/13/sequelpro-c-h</id>
    <content type="html"><![CDATA[<p>Mac ユーザで Sequel Pro を使っている人なら分かってくれると思いますが、Sequel Pro でクエリ入力してる時に C-h 押すとヘルプがでてくるの勘弁ならないですよね。
そんな訳で KeyRemap4MacBook を使って C-h がバックスペースになるように設定してみました。</p>

<h2>設定開始</h2>

<p>まず KeyRemap4MacBook の Misc &amp; Uninstall から private.xml を開きます。<br/>
なかったら <code>$HOME/Library/Application\ Support/KeyRemap4MacBook/private.xml</code> を作って下さい。</p>

<p><a href="http://www.flickr.com/photos/hamaco/8470788540" title="KeyRemap4MacBook-01" class="dpad-flickr-img"><img src="http://farm9.staticflickr.com/8241/8470788540_fb68c8f00a_m.jpg" alt="KeyRemap4MacBook-01"/></a></p>

<p><code>private.xml</code> が開いたら中身を以下のような感じにします。</p>

<figure class='code'><figcaption><span>private.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;root&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appdef&gt;</span>
</span><span class='line'>      <span class="nt">&lt;appname&gt;</span>SEQUELPRO<span class="nt">&lt;/appname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;equal&gt;</span>com.sequelpro.SequelPro<span class="nt">&lt;/equal&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appdef&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;</span>My keymappings<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;item&gt;</span>
</span><span class='line'>          <span class="nt">&lt;name&gt;</span>C-h to Backspace (SequelPro)<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>          <span class="nt">&lt;identifier&gt;</span>private.app_sequelpro_control_h_to_backspace<span class="nt">&lt;/identifier&gt;</span>
</span><span class='line'>          <span class="nt">&lt;only&gt;</span>SEQUELPRO<span class="nt">&lt;/only&gt;</span>
</span><span class='line'>          <span class="nt">&lt;autogen&gt;</span>--KeyToKey-- KeyCode::H, ModifierFlag::CONTROL_L, KeyCode::DELETE<span class="nt">&lt;/autogen&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>private.xml</code> の編集ができたら、後は XML を再読み込みして、今作った設定にチェックを入れるだけ！</p>

<p><a href="http://www.flickr.com/photos/hamaco/8469695085" title="KeyRemap4MacBook-02" class="dpad-flickr-img"><img src="http://farm9.staticflickr.com/8520/8469695085_0f88729fd2_m.jpg" alt="KeyRemap4MacBook-02"/></a></p>

<p>これで Sequel Pro でも C-h で バックスペースが使えるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xperia GX買ってからしばらく経った]]></title>
    <link href="http://hamaco.github.com/blog/2013/02/12/xperiagx-impression/"/>
    <updated>2013-02-12T16:13:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/02/12/xperiagx-impression</id>
    <content type="html"><![CDATA[<p>Portable Wi-Fi の2年縛りが切れて買い替えようと思ってた時に、スマホでも料金とか変わらないっすよってドコモショップの人が言ってたので Wi-Fi 端末の代わりに購入した。</p>

<h2>良い所</h2>

<ul>
<li>Portable Wi-fi と比べてバッテリーの持ちが良い</li>
<li>懇親会中とかのちょっとした時とかテザリング不要な時はそのまま使える</li>
<li>充電がMicro USB</li>
</ul>


<h2>微妙な所</h2>

<ul>
<li>回線切れてる時に通信しようとすると通信エラーでテザリングが切れる</li>
<li>iPhone と比べてバッテリーの持ちが悪い</li>
<li>アンテナ立ってるのに繋がらなかったりとか回線が結構不安定</li>
</ul>


<p>まあおおむね満足かな?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPadのRSSリーダーをMr.Readerに乗り換えた]]></title>
    <link href="http://hamaco.github.com/blog/2013/01/24/mr-reader/"/>
    <updated>2013-01-24T15:53:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/01/24/mr-reader</id>
    <content type="html"><![CDATA[<p>今まで iPad では iPhone でも使っている Reeder を使っていたのですが、Nexus 7 とか他の端末をしばらく使っている間に Mr.Reader オススメ的なブログをちょこちょこ見ていたので乗り換えてみたらこれがすげー良い感じで、今年のベストアプリに入るんじゃないかってくらい使いやすい。</p>

<p>個人的な Mr.Reader の良いところはこんな感じ。</p>

<h2>スクロールするだけで既読にできる</h2>

<p><a href="http://www.flickr.com/photos/hamaco/8393953789" title="Mr. Reader 01"><img src="http://farm9.staticflickr.com/8515/8393953789_81d599f585_m.jpg" alt="Mr. Reader 01"/></a></p>

<p>自分が Google Reader に登録しているのはニュース系のサイトとか Twitter みたいに件数が多くて流し読みするタイプのがメインなので気が付くと数千単位で未読が溜まってしまい、消化するのも面倒になって全件既読ばっかりしていました。</p>

<p>Mr.Reader はスクロールするだけで自動的に既読化することができるので、iPad の大きな画面でだいぶ快適にサクサクとフィードが消化できています。</p>

<h2>記事のサムネイルが表示できる</h2>

<p>これは、Android の NewsRob Pro でもあったのですが、記事中の画像が一枚サムネイルとして一覧に表示されるので、いちいち英語を真剣に読まなくても、興味ありそうな画像だったらスターをつけて後で見る運用がちょっと楽になってます。</p>

<p>ただ、目の移動が少なくなるように左側に表示してるんだけど、必ずサムネイルがでるとは限らないので記事によってタイトルの開始位置がズレてしまうのがちょっと難点。</p>

<h2>表示モードを固定したまま記事の移動ができる</h2>

<p><a href="http://www.flickr.com/photos/hamaco/8395039032" title="Mr. Reader 02"><img src="http://farm9.staticflickr.com/8364/8395039032_c8f7e716f3_m.jpg" alt="Mr. Reader 02"/></a></p>

<p>流し読みタイプのもの以外で意外と多いのが RSS に全文入ってなかったりして、実際のサイトに飛ばないといけないのがあるのですが、これも Mr.Reader なら WebView や Readability 等の表示モードが選べる上、鍵アイコンをタップするとフィード毎に表示モードを記憶してくれるので、一々記事タイトルクリックしてブラウザで見たり、スターを付けて Pocket に送ってからあとで見たりとかしなくて良くなりました。</p>

<h2>そんなわけで</h2>

<p>Mr.Reader がほぼ完全に自分の Google Reader の使い方にマッチしているのであまりにもライフハックで生きるのが辛い。</p>

<p>今まで消化するのが面倒で未読が万単位で溜まったりしてたのが、500 - 2000 程度をうろちょろするようになりましたとさ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora17 で SSH Server を自動起動させる]]></title>
    <link href="http://hamaco.github.com/blog/2013/01/13/sshd-on-fedora17/"/>
    <updated>2013-01-13T22:29:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2013/01/13/sshd-on-fedora17</id>
    <content type="html"><![CDATA[<p>久し振りにFedoraを使ってみたらサービスの起動方法が変わっていてびっくりしたのでメモ。</p>

<p>普通に今まで通り <code>/etc/init.d/sshd start</code>とかやろうとしたのにファイルがなくて sshd の起動ができなかった。
ちょっと調べてみたら最近の Fedora は systemctl コマンドでその辺管理するようになったらしい。</p>

<h2>起動</h2>

<pre><code>sudo systemctl start sshd.service
</code></pre>

<h2>停止</h2>

<pre><code>sudo systemctl stop sshd.service
</code></pre>

<h2>再起動</h2>

<pre><code>sudo systemctl restart sshd.service
</code></pre>

<h2>自動起動</h2>

<p>これは <code>/etc/systemd/system</code> から <code>/etc/systemd/system/multi-user.target.wants</code> とかにシンボリックリンク作ってるだけっぽい</p>

<pre><code>sudo systemctl enable sshd.service
</code></pre>

<h2>状態確認</h2>

<pre><code>sudo systemctl status sshd.service
</code></pre>

<p>こんな感じに表示されて自動起動が有効になってるか(enabled)とか色々分かるようになっててちょっと便利。</p>

<pre><code>sshd.service - OpenSSH server daemon
          Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled)
          Active: active (running) since Sun, 13 Jan 2013 19:35:04 +0900; 2h 59min ago
        Main PID: 2242 (sshd)
          CGroup: name=systemd:/system/sshd.service
                  └ 2242 /usr/sbin/sshd -D
</code></pre>

<h2>終わり</h2>

<p>これ <code>start</code> とかが最後にこないので C-p とかで過去の出した後に編集するのが面倒で微妙に辛い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年ふりかえり]]></title>
    <link href="http://hamaco.github.com/blog/2012/12/31/2012-summary/"/>
    <updated>2012-12-31T23:00:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/12/31/2012-summary</id>
    <content type="html"><![CDATA[<p>2012年のふりかえりが流行ってるっぽいので簡単にふりかえっておこうかなー。</p>

<h2>ガジェット総入れ替え</h2>

<p>全然気付いてなかったんですが、今メインで持ってるガジェットが一通り今年買ったやつみたい。</p>

<p>N903i / Galaxy S2 / iPhone 3GS / 初代iPad / Kindle 4th / Macbook Air Late 2010</p>

<p>だったのが、</p>

<p>P-03B / Xperia GX / iPhone 4S / Nexus 7 / Kindle Paperwhite / Macbook Air Mid 2012</p>

<p>といつの間にか切り替わってたっぽいです。 Kobo? なにそれ、美味しいの?</p>

<h2>CandyCane にコミットした</h2>

<p>普段あんまりオープンソース的な活動してなかったんですが、 <a href="https://github.com/yandod/candycane">CandyCane</a> 本体には今年の 5/17 のコミットを最初に40回ほどコミットしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git shortlog -sn | grep hamaco
</span><span class='line'>10:    40       hamaco</span></code></pre></td></tr></table></div></figure>


<p>CandyCane には本体のコミットよりプラグインてきとーに作ったほうがネタになった気がします。
作ったプラグインはこんな感じ。まあ大半が Redmine の同名プラグインのパクりかネタプラグインですね。</p>

<ul>
<li><a href="https://github.com/hamaco/candycane-repository-browser">candycane-repository-browser</a></li>
<li><a href="https://github.com/hamaco/candycane-u-nya-">candycane-u-nya-</a></li>
<li><a href="https://github.com/hamaco/candycane-theme-changer">candycane-theme-changer</a></li>
<li><a href="https://github.com/hamaco/candycane-gal">candycane-gal</a></li>
<li><a href="https://github.com/hamaco/candycane-enter-cancel">candycane-enter-cancel</a></li>
<li><a href="https://github.com/hamaco/candycane-comment-only">candycane-comment-only</a></li>
</ul>


<p>まあ、CandyCane 以外のにもコミットしたりしたけど、バグちょこっと直したとかがメインで CandyCane ほどコミットしたのはないかなぁ。</p>

<h2>アニメ見るようになった</h2>

<p>昔はボチボチアニメ見たりしてたんだけど、ここ数年まったく見てませんでした。
でも、<a href="http://animita.tv/">あにみた！</a>っていうサービスが夏頃でたのと、同僚からオススメされたのを切っ掛けにまた見るようになりました。</p>

<p>結構アニメ見てる知り合い・同僚いたり、プレゼンでネタとしてでてくるので、これは結構話のネタになったりして良い感じでした。</p>

<h2>イベントのスタッフ初めてやった</h2>

<p>手伝いとかその程度のことは今までやってきたことあったけど、スタッフ自体をやったのは今年が初めてでした。
「PHPカンファレンス 2012」の当日スタッフやったとか「XOOPS Cube CONFERENCE 2012」のやり取り眺めてたとかその2つかな?</p>

<p>(追記：2013-01-03) 完全に忘れてたけど、WordBench東京もスタッフやってました。</p>

<h2>おしまい</h2>

<p>意外とこうやって振り替えってみると、去年までビールを飲む以外に何やってたのかが気になりますね。</p>

<p>来年はもうちょっとブログでふりかえれるような活動していきたいかなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CandyCane API実装中]]></title>
    <link href="http://hamaco.github.com/blog/2012/12/09/cakephp-adventcalendar-2012/"/>
    <updated>2012-12-09T19:02:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/12/09/cakephp-adventcalendar-2012</id>
    <content type="html"><![CDATA[<p>このエントリは、<a href="http://www.adventar.org/calendars/40">CakePHP Advent Calendar 2012</a>の9日目です。8日目は<a href="https://twitter.com/junichi_11">@junichi_11</a>さんの「<a href="http://junichi11.com/?p=2665">NetBeans plugin の改善点</a>」でした。</p>

<h2>はじめに</h2>

<p>普段仕事でCakePHPをメインに使ってるとかそういったことがまったくなく、私がCakePHPをネタにする時は大体CandyCaneネタなので、今回もCandyCaneネタでいきたいと思います。</p>

<h2>REST API</h2>

<p>RedmineにはREST APIというものがあって、XMLやJSON形式でチケットの一覧が見れたり、チケットの登録などの作業がRedmineのWebページを使わずにできるようになっています。
ここで紹介するだけあって、もちろんCandyCaneには実装されてません(でした)。</p>

<p>そんな訳で一部APIをさっき実装してみました。
今回は <a href="https://github.com/yuroyoro/git-issue">git-issue</a> というRedmineのチケットを表示・編集できるツールが使えるようにしたいというのを目標に実装してみたので、それの動作をRedmineとCandyCaneで比較しつつ紹介していきたいと思います。</p>

<h2>API keyの作成</h2>

<p>API keyの作成部分はCandyCane側は今の所APIをOFFにできないくらいで基本的な作成方法は同じになっています。
個人設定ページの右サイドバーにAPI keyの表示・作成がある感じですね。</p>

<h3>Redmine</h3>

<p><img src="http://hamaco.github.com/images/2012/12/cakephp-adventcalendar-2012-01.png"></p>

<h3>CandyCane</h3>

<p><img src="http://hamaco.github.com/images/2012/12/cakephp-adventcalendar-2012-02.png"></p>

<h2>git-issueの設定</h2>

<p>一応git-issueの初期設定も簡単に書いておきます。
git-issueを使いたいプロジェクトの中で以下のようにコマンドを打つとgit issueサブコマンドで色々できるようになります。
type以外の部分は自分のCandyCane/Redmineのに合わせて変えて下さい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git config issue.type redmine
</span><span class='line'>% git config issue.url http://candycane.hamacbook.local/
</span><span class='line'>% git config issue.apikey e9897fd4de9570b5d61744d8ab1e18b796615e5b
</span><span class='line'>% git config issue.repo candycane
</span><span class='line'>% git config issue.user hamaco</span></code></pre></td></tr></table></div></figure>


<h2>チケットの一覧表示</h2>

<p>CandyCane/Redmineに登録されているチケットの一覧が表示できます。</p>

<h3>Redmine</h3>

<p><img src="http://hamaco.github.com/images/2012/12/cakephp-adventcalendar-2012-03.png" width="680"></p>

<h3>CandyCane</h3>

<p><img src="http://hamaco.github.com/images/2012/12/cakephp-adventcalendar-2012-04.png" width="680"></p>

<h2>チケットの詳細表示</h2>

<p>CandyCane/Redmineに登録されているチケットの詳細が表示できます。</p>

<h3>Redmine</h3>

<p><img src="http://hamaco.github.com/images/2012/12/cakephp-adventcalendar-2012-05.png" width="680"></p>

<h3>CandyCane</h3>

<p><img src="http://hamaco.github.com/images/2012/12/cakephp-adventcalendar-2012-06.png" width="680"></p>

<h2>チケットの登録</h2>

<p>ここが一番やりたかったのですが、時間がなくなってしまったのと、git-issueがチケット登録時にJSONでデータを渡していて、CakePHPで上手いやり方が分からなかったので実装できてません……</p>

<h2>最後に</h2>

<p>まだまだ全然できてないですが、一応多少作ったので紹介してみました。まだ本家にpull requestを投げてないので、今は<a href="https://github.com/hamaco/candycane/tree/api-access">ここのブランチ</a>をチェックアウトしてくると試す事ができます。</p>

<p>明日は<a href="https://twitter.com/yandod">@yandod</a>さんです。よろしくお願いしますー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpeakerDeckのスライドを操作するvimperatorプラグイン書いてみた]]></title>
    <link href="http://hamaco.github.com/blog/2012/11/19/speakerdeck-js/"/>
    <updated>2012-11-19T12:12:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/11/19/speakerdeck-js</id>
    <content type="html"><![CDATA[<p>slideshare.js プラグインが便利で、SpeakerDeck でも同じ様に h/l でスライドをめくりたかったので slideshare.js を参考にプラグイン書いてみた。</p>

<p>まだ vimperator のプラグイン良く分かってなくて、PLUGIN_INFO だか INFO だかを書いたほうが良いっぽいんだけどどっちが正しいのかが分からなかったので書いてない……</p>

<div><script src='https://gist.github.com/4105959.js?file='></script>
<noscript><pre><code>(function() {
  var SpeakerDeck = function() {
    var doc = content.document;
    if (doc.location.host !== 'speakerdeck.com') {
      return liberator.echoerr('Current page is not speakerdeck.');
    }

    var iframe = doc.wrappedJSObject.getElementsByClassName('speakerdeck-iframe')[0];
    var slide  = iframe.contentWindow.Slide;

    return {
      next: function() {
        slide.next();
      },
      prev: function() {
        slide.previous();
      }
    }
  };

  commands.addUserCommand(
    ['speakerdeck'],
    'SpeakerDeck controller',
    function() {},
    {
      subCommands: [
        new Command(['n[ext]'], 'Go next page',     function() SpeakerDeck().next()),
        new Command(['p[rev]'], 'Go previous page', function() SpeakerDeck().prev()),
      ]
    },
    true
  );
})();</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログのテーマを変更してみた]]></title>
    <link href="http://hamaco.github.com/blog/2012/11/15/change-octopress-theme/"/>
    <updated>2012-11-15T21:44:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/11/15/change-octopress-theme</id>
    <content type="html"><![CDATA[<p>久し振りに <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Octopressのテーマ一覧</a> を見たら結構テーマが増えていたのでテーマを変更してみました。</p>

<p>今回は一番上にあった <a href="https://github.com/shashankmehta/greyshade">greyshade</a> っていうテーマを入れてみたのですが、ちょっとだけ面倒だったのでメモメモ。</p>

<h2>インストール</h2>

<p>インストール自体は他のテーマと同じ感じでOK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/shashankmehta/greyshade.git .themes/greyshade
</span><span class='line'>rake install['greyshade']</span></code></pre></td></tr></table></div></figure>


<h2>リンクカラー設定</h2>

<p>このテーマはリンクカラーを自分で決めないといけないみたいなので _colors.scss に <code>$greyshade: {color}</code> を追加します。
今回はこのテーマのデモページと同じ色にしてみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "\$greyshade: #2571B8;" &gt;&gt; sass/custom/_colors.scss</span></code></pre></td></tr></table></div></figure>


<h2>プロフィール画像設定</h2>

<p>結構目立つ所にプロフィール画像が表示されるので source/images/dp.jpg に自分のプロフィール画像を配置します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp {my_profile}.jpg source/images/dp.jpg</span></code></pre></td></tr></table></div></figure>


<h2>見た目修正</h2>

<p>ヘッダー部分のソーシャルアイコンが以下の画像のように微妙に変な位置に表示されてしまっていたのでちょこっとだけテンプレートを編集します。</p>

<p><img src="http://hamaco.github.com/images/2012/11/change-octopress-theme-01.png"></p>

<p>といっても source/_includes/header.html の7行目からalignleftを取り除くだけですが。</p>

<h2>おしまい</h2>

<p>後は普通に deploy すれば完了です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Matsuri 2012に参加してきた]]></title>
    <link href="http://hamaco.github.com/blog/2012/11/14/phpmatsuri-2012/"/>
    <updated>2012-11-14T23:04:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/11/14/phpmatsuri-2012</id>
    <content type="html"><![CDATA[<p>11/3 - 11/4に福岡で開催されたPHP Matsuri 2012に参加してきました。
東京のMatsuriには行ったことがないのでPHP Matsuriの参加は前回の関西に続いて2回目の参加です。</p>

<p>前回PHP Matsuriってのがどんなのか良く分からずなんの準備もなく参加したけど、今回は前回の教訓を生かして事前にLTネタを考えてから参加しま……せんでした。
PHP Matsuriの前のPHP勉強会でネタ決めましたー? 決めてないですーとか会話しつつ何か考えないといかんなー何にしようかなーとか思ってたらいつの間にか当日になってたとかいう状態で去年の反省どこいったのやら。</p>

<h2>前日</h2>

<p>そんなわけで唯一の去年の教訓を生かして事前に金曜と月曜の有給を取得しておいたので夕方頃に福岡に到着。
しかし、この時点で昼を福岡で食べれるように飛行機とっておけば、一食福岡で食事する機会が増えたのにとちょい後悔。</p>

<p>福岡に着いた時点でXperiaのバッテリーがヤバかったのでホテルで充電してたら、アシアルの変な人がMonacaのセミナーやってるとか言ってたので懇親会目当てに参加したら懇親会にグラハム &amp; ホセが現れたり、3次会まで行ったりとかでホテルに戻ってきたのが朝の4時近くとかいうMatsuriの前日とは思えない時間になってました。
セミナー会場入った時に見えた人に嫌な予感がしたんだよなぁ……</p>

<h2>初日</h2>

<p>昼から夜の間の記憶がうどんが美味しかったくらいしか残ってないのですが、多分デプロ～イとかあったようななかったような。</p>

<p>夜中1時前くらいから部屋の前の方でファミコンをピコピコやってる音が聞こえてくる中、candycane-repository-browserをある程度形に持っていったり、一緒にファミコンやったりしてました。
ファミコンがあるかもと噂を聞いていたので家にあったなんか良くわからないスーパーマリオブラザーズを持って行ったりしたのですが、マリオをプレイしてそうな時間帯に丁度BEAR.Sundayのワークショップ参加してたので実際プレイしたのかどうかは分からず……</p>

<p>ファミコンやった後丁度LTの申し込み受付開始してたので申し込みして眠たかったので椅子4つ程並べて3時間程寝て初日はおしまい。</p>

<h2>二日目</h2>

<p>朝起きてちょっとポチポチ弄ってたらgithubのAPI制限に引っかかってしまい何も表示されない状態になったりしつつ細かい所修正したり、もうどうでも良い気分になって諦めたりしてたらいつの間にか時間切れ。</p>

<p>どうせ発表時間3分ないだろうと高をくくってまったく資料とか用意してなかったのに、4分+準備に1分とか凄い長い時間あったので仕方なくshowtime.vimで簡単なスライド作って自作のネタプラグインとかインストールしてLT準備しました。</p>

<p>発表自体は後5秒くらいって所で終わってしまい微妙に残念でしたが、意外とポイントが高かったみたいでスタバのカード(3000円)貰っちゃいました。</p>

<h2>完成物</h2>

<p>LTで発表したcandycane-repository-browserがいきあたりばったりすぎてCakePHPのPluginとしてちゃんと動いてなかったのを直してから書こうと思ってたらこんなに遅くなってしまいました。</p>

<p>まあまだまだ色々ちゃんと動いてなかったりするので実際に使えるようになるのはもうちょい先だと思うけど、一応Plugin化できたので公開しちゃおうかと。
ちゃんと作ってからだとなんかあんまりPHPMatsuriで頑張った感がなくなっちゃうし。</p>

<p>そんなわけで<a href="https://github.com/hamaco/candycane-repository-browser">ここ</a>で公開してます。</p>

<p>ただ、CandyCane本体を弄ってるのでこの後pull request投げて、取り込まれるまで動かないです。取り込まれ次第candycane-pluginsのリポジトリにpull request投げる予定なのでしばらくしたらプラグインマネージャからインストールできるようになると思います。</p>

<p>既にいくつかIssues書いたりしてるのでボチボチ作業していこうかなぁといった所。</p>

<h2>おまけ</h2>

<p>ついでなので福岡で食べたものの写真でも載せときます。</p>

<p><img src="http://hamaco.github.com/images/2012/11/phpmatsuri-2012-01.png" width="320"></p>

<p><img src="http://hamaco.github.com/images/2012/11/phpmatsuri-2012-02.png" width="320"></p>

<p><img src="http://hamaco.github.com/images/2012/11/phpmatsuri-2012-03.png" width="240"></p>

<p><img src="http://hamaco.github.com/images/2012/11/phpmatsuri-2012-04.png" width="240"></p>

<p><img src="http://hamaco.github.com/images/2012/11/phpmatsuri-2012-05.png" width="240"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新Macbook Airを買ったので設定したことまとめ その2]]></title>
    <link href="http://hamaco.github.com/blog/2012/07/25/setup-macbook-air-02/"/>
    <updated>2012-07-25T14:58:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/07/25/setup-macbook-air-02</id>
    <content type="html"><![CDATA[<p>大分前にその1を書いた、Macbook Airのセットアップまとめ記事 その2。めんどくさくて放置してたんですが、なんかもうMountain Lionが発売されちゃうらしいので、別マシンにMountain Lion入れる時の参考用兼ねて、よく見かけるMacに最初に入れたアプリ20個を紹介してみます。</p>

<p>ちなみに前回は<a href="http://hamaco.github.com/blog/2012/06/21/setup-macbook-air-01/">こちら</a></p>

<h2>インストールしたアプリ</h2>

<p>前回入れたKeyRemap4macbookとAquaSKKは除外</p>

<h3>1.Opera</h3>

<p>まあこれを入れなきゃなにも始まらないですよね。戻る・進むが高速だったりどこぞの腐ったブラウザと違って普通にPOSTページのソース見れたり、簡単にHTML弄れたりと基本的な部分が使い易すぎます。
ただ、Operaだとちゃんと動かないページがそれなりに……</p>

<h3>2.Firefox</h3>

<p>主に開発中のメインブラウザ。携帯ページの開発とかでUA簡単に変更できるFirefoxをずっと使ってます。
ちなみにインストールしたアドオンはこれくらい。</p>

<ul>
<li>1Password</li>
<li>Clearly</li>
<li>Evernote Web Clipper</li>
<li>Firebug</li>
<li>FireMobileSimlator</li>
<li>Hatenabookmark</li>
<li>Stylish</li>
<li>Vimperator</li>
</ul>


<h3>3.Google Chrome</h3>

<p>ほとんどFlash見る専用ブラウザ。Windowsマシンだとfacebook見たりとかに使っててたのでインストールしたけど、MacだとSafariで十分なのであんまり立ち上げる機会がない。</p>

<h3>4.MacVim</h3>

<p>メインで使ってるエディタがVimなのでそれのMac版。もうVimがないと開発とか色々やる気が起きない。
設定は<a href="https://github.com/hamaco/dotfiles/blob/master/dot.vimrc">この辺</a>に置いてあります。</p>

<h3>5.YoruFukurou</h3>

<p>Twitterクライアント。他に使い易いのがあるかもしれないけどキーバインドとかが自分の好みにあっているのでずっとこれを使ってます。</p>

<h3>6.Growl</h3>

<p>通知ツール。Lionに入れてからそれなりに暴走するのが困り所。</p>

<h3>7.Dropbox</h3>

<p>きっと誰もが知ってるクラウドストレージ。なんだかんだで他のに移行するの面倒だし、色んなアプリが対応してたりするのでずっとこれ使ってます。ちょこちょこイベントあったりして容量が増えてくのもGOOD!</p>

<h3>8.1Password</h3>

<p>パスワード管理ソフト。Windows/Mac/iPhone/Android/WindowsPhoneとLinux以外の自分が使ってる全てのOSに対応している&amp;Opera以外のブラウザAdd-onがあるので、パスワード管理はこれ一択。
いや、まあKeePassとかあるけど、昔使ってた時全体的な使い勝手が悪かったりしたので……</p>

<h3>9.Sequal Pro</h3>

<p>MySQLのフロントエンドツール。基本コマンドラインでMySQLを操作してたんだけど、普通の人に画面見せたりする時に分かりにくいと思って試しに入れてみたらこれが非常に使い易い。
これのPostgreSQL版とかないかなー。</p>

<h3>10.MAMP</h3>

<p>買った直後にハッカソンがあったりとかで開発環境必要だったのでとりあえず入れた。PHP5.3も動くし、変なことしないなら案外これだけでもいけるかもしれない。</p>

<h3>11.iTerm2</h3>

<p>ターミナルソフト。MacデフォルトのTerminalだとなんか問題があってこいつ使ってるんだけど理由を覚えていないという……
基本的にTerminal&amp;Visorの頃と同様に、Command+EnterでHotkey Windowsがでるようにして使ってます。</p>

<h3>12.homebrew</h3>

<p>パッケージマネージャ。 yumとかaptみたいなやつ。macportsより楽に使えるのでこっち使ってる。</p>

<h3>13.Horst</h3>

<p>hostファイルをGUIで管理できるようになるツール。今迄普通にTerminalで/etc/hosts弄ってたんだけど、LionになってHorstが使えるようになったので試しに使用中。
起動時に毎回ウィンドウサイズがリセットされる以外はまあボチボチ使い易いかな。</p>

<h3>14.BetterTouchTool</h3>

<p>細々した機能があるツールをいくつも入れるのが面倒だったので、まとめて導入できるこいつを使ってます。
Windows7風にキーボードで画面サイズ最大化とか、Opera以外のブラウザでロッカージェスチャ(TipTap)有効化にするとかそんな感じでちまちましたやつをいくつか設定してます。</p>

<h3>15.Alfred</h3>

<p>ランチャー。QuickSilverが更新されてなかったのとなんだったか問題があってしばらく前にこれに乗り換えた。まだ普通のランチャー機能+ホットキーでのLockくらいしか使ってないけど……</p>

<h3>16.Caffeine</h3>

<p>Macのスリープを防止してくれるソフト。普段メインマシンはWindowsなので、Macがしょっちゅうスリープして面倒だったので入れてます。後はイベントの時とかにONにしておくとプレゼンしてて、気が付くと画面真っ黒とか防いでくれるので便利。ON/OFFするの忘れるのが一番の困りもの。</p>

<h3>17.OmniFocus</h3>

<p>TODO管理ソフト。他にも色々あるんだけどなんか良く名前を聞く気がしたので使用中。</p>

<h3>18.SimpleCap</h3>

<p>スクリーンショットツール。最低限必要な機能があったのと、角丸で撮ることとかができたので基本的にはこれを使ってます。基本的にスクリーンショット加工しないのでこれで十分。</p>

<h3>19.Transmit</h3>

<p>FTPとかのファイル転送クライアント。なにかのタイミングで安く手に入ったのと、リモートとローカルを同期してくれたりして細かい所が便利だったので使ってます。最近だとディスクとしてマウントできたりするのでさらに便利になってるけど、FTPとかWebDAV関係使う機会もなくなってきたのであんまり活躍する所がなくなってきてる。</p>

<h3>20.iStat Menus</h3>

<p>リソースモニタリングソフト。メニューバーから簡単にCPU使用状況とか見れるので便利。Memory・CPU・Date&amp;Time・Batteryの4つ表示して使ってます。
ちなみに関係ないアプリですがiStat ProというDashboard用のモニタリングソフトも一応入れてたりします。</p>

<h2>終わり</h2>

<p>とりあえずインストールしたのはこのくらい。 まあ現在はお試しで入れてみたり、仕事で必要になったアプリとか入れてますが必ず入れるのはこの辺かなーと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox OSを試してみた]]></title>
    <link href="http://hamaco.github.com/blog/2012/07/23/try-firefox-os/"/>
    <updated>2012-07-23T13:52:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/07/23/try-firefox-os</id>
    <content type="html"><![CDATA[<p>Firefox OSが試せるらしいので試してみました。まあ参考サイトまんまですが一応メモ。
基本的に全てのコマンドでデカいファイルDLしたりしてそれなりに時間が掛かるので何か作業やりながらとかやると良いと思います。</p>

<h2>インストール</h2>

<p>Windowsだと動かないとかいう話を聞いたりするのでUbuntu 12.04で試してみました。Mac? 知らん。</p>

<h3>ダウンロード</h3>

<p><a href="http://ftp.mozilla.org/pub/mozilla.org/b2g/nightly/latest-mozilla-central/">ここ</a>からWindows/Mac/Linux用のファイルがDLできるのでDLして解凍する。20MBくらいあってそれなりにDLに時間掛かります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://ftp.mozilla.org/pub/mozilla.org/b2g/nightly/latest-mozilla-central/b2g-17.0a1.en-US.linux-i686.tar.bz2
</span><span class='line'>tar xf b2g-17.0a1.en-US.linux-i686.tar.bz2</span></code></pre></td></tr></table></div></figure>


<h3>プロファイル作成</h3>

<p>それなりに長いb2gのDLが完了したらMozillaスマフォのUIであるGaiaなるもののprofileを作成する。こっちはひたすら時間が掛かるので実行後放置推奨。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd b2g
</span><span class='line'>git clone git://github.com/mozilla-b2g/gaia
</span><span class='line'>make -C gaia profile</span></code></pre></td></tr></table></div></figure>


<h2>起動</h2>

<p>プロファイルの作成が終わったら後は起動するだけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./b2g -profile gaia/profile</span></code></pre></td></tr></table></div></figure>


<p>以下テキトーにスクショ</p>

<h3>ロック画面</h3>

<p><img src="http://hamaco.github.com/images/2012/07/try-firefox-os-01.png" width="322"></p>

<h3>ホーム画面</h3>

<p><img src="http://hamaco.github.com/images/2012/07/try-firefox-os-02.png" width="322"></p>

<h3>通知バー</h3>

<p>Androidっぽい通知バーも一応ある。出し方も一緒</p>

<p><img src="http://hamaco.github.com/images/2012/07/try-firefox-os-03.png" width="322"></p>

<h3>ブラウザ</h3>

<p>なんかブラウザでページ表示させると上2/3くらいが真っ黒になるのは自分だけだろうか。</p>

<p><img src="http://hamaco.github.com/images/2012/07/try-firefox-os-04.png" width="322"></p>

<h3>メール</h3>

<p>メールも一応ある。流石になにかあったら怖いので自分のアカウントは入れてないけど。</p>

<p><img src="http://hamaco.github.com/images/2012/07/try-firefox-os-05.png" width="322"></p>

<h3>カメラ</h3>

<p>カメラはあるけどやっぱり真っ暗。</p>

<p><img src="http://hamaco.github.com/images/2012/07/try-firefox-os-06.png" width="322"></p>

<p>マウスカーソルの存在忘れてたorz</p>

<h2>参考サイト</h2>

<p><a href="https://dev.mozilla.jp/2012/07/try-firefox-os/">Firefox OS を試す | Mozilla Developer Street (modest)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macのtmuxでクリップボードを使えるようにする（主にVimの為に）]]></title>
    <link href="http://hamaco.github.com/blog/2012/07/05/fix-macosx-tmux-pasteboard/"/>
    <updated>2012-07-05T16:22:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/07/05/fix-macosx-tmux-pasteboard</id>
    <content type="html"><![CDATA[<p>MacOSXのtmuxだとpbcopy|pbpasteが正常に動作しないみたいで、CUI版のVimで<code>set clipboard=unnamed</code>していると<code>p</code>でペーストする際に<code>E353: Nothing in register *</code>とかエラーがでてペーストが一切できなくなってしまいます。
常にGui版のMacVimでも使っていれば良いのですが、流石にCUI版を一切使わない or ペーストしない生活は私には出来ないのでちょっと調べてみたら結構簡単に対処できたのでメモ。</p>

<h2>やり方</h2>

<p><a href="https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard">ChrisJohnsen/tmux-MacOSX-pasteboard</a>を使うと簡単にできるみたいです。READMEに書いてあるままやってるだけなのでそのままそっち見ながらやった方が楽かもしれない。</p>

<h3>プログラムのコンパイル</h3>

<p>普通にgitでcloneしてきてからmakeして、PATHの通った所にファイルを置きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard.git
</span><span class='line'>cd tmux-MacOSX-pasteboard
</span><span class='line'>make reattach-to-user-namespace
</span><span class='line'>cp reattach-to-user-namespace ~/bin/</span></code></pre></td></tr></table></div></figure>


<p>別にmakeだけでも実行ファイルできあがりますが、ついでにtestとかいうのもmakeされるので、READMEに書かれてる通りmakeに引数渡してます。</p>

<h3>tmuxの設定</h3>

<p>次に<code>.tmux.conf</code>に以下の内容を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set-option -g default-command "reattach-to-user-namespace -l zsh"</span></code></pre></td></tr></table></div></figure>


<h3>できた</h3>

<p>これで準備は完了。後は<code>tmux kill-server</code>とかやってtmux立ち上げ直すと<code>date | pbcopy</code>とかで結果がMacのクリップボードに入るようになっているはず。
無事クリップボードが使えるようになったら、Vimでも<code>set clipboard=unnamed</code>している状態でコピペが動作するようになっているのを確認して終了!</p>

<h2>参考サイト</h2>

<p><a href="http://d.hatena.ne.jp/koseki2/20110816/TmuxCopy">Mac の tmux でクリップボードを使う。 - こせきの技術日記</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新Macbook Airを買ったので設定したことまとめ その1]]></title>
    <link href="http://hamaco.github.com/blog/2012/06/21/setup-macbook-air-01/"/>
    <updated>2012-06-21T00:48:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/06/21/setup-macbook-air-01</id>
    <content type="html"><![CDATA[<p>ディスク容量やらメモリやら普通に使う上で不便になってきたので新しく発売されたMacbook Air 13inchを買いました。
で、OSもLionになったしどうせだから最初から設定してみるかーってことになったのでその時のメモを何回かに分けてまとめてみます。</p>

<h2>初期設定</h2>

<p>ことえりとか意味の分からないもの使わないのでUSを選んだ以外はまったくもってふつーだと思うので省略。</p>

<h2>最低限必要なアプリ導入</h2>

<p>まあ、真っ先にインストールしたのはOperaとMacVimなのですが、インストールしたアプリは後日まとめるとして環境設定系でとりあえず必須のKeyRemap4MacBookとAquaSKKをインストールしました。</p>

<h2>システム環境設定</h2>

<p>後はひたすら1個ずつ確認しながらシステム環境設定をちまちま弄ります。</p>

<h3>デスクトップとスクリーンセーバー</h3>

<p>壁紙を自分の好きなのに変更し、半透明メニューバーをOFFす。
そしてスクリーンセーバーをFlurryに変更し、開始時間を5分に。</p>

<h3>Dock</h3>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-01.png" width="480"></p>

<p>元々狭い縦が狭くなるの嫌いなのでDockを左に移動して最小化。</p>

<h3>Mission Control</h3>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-02.png" width="480"></p>

<p>ホットキーの設定をSnow Leopardの頃と同じにしてみた。ただ、ジェスチャが揃ってるので不要になるかも。</p>

<h3>言語とテキスト</h3>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-03.png" width="480">
入力ソースでAquaSKKを有効にして、一生使うことのないであろう入力ソースのショートカットを無効化。</p>

<h3>セキュリティとプライバシー</h3>

<p>一応なにかあった時の</p>

<h3>Spotlight</h3>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-04.png" width="480"></p>

<p>SpotlightなんてどうせGrowlで被るし使わないのでキーボードショートカットOFF。</p>

<h3>キーボード</h3>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-05.png" width="480"></p>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-06.png" width="480"></p>

<p>JISキーボードのCapsLockはDelayもなく誤爆しやすいし、CapsLockなんて使わないのでアクションなしに。ここでキーリピートとか変更したけど実は意味なかったりもする。</p>

<h3>トラックパッド</h3>

<p>全てのチェックを入れて軌跡の速さをMAXに。</p>

<h3>共有</h3>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-07.png" width="480"></p>

<p>デフォルトのコンピュータ名が酷いので変更する。</p>

<h2>KeyRemap4MacBook</h2>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-08.png" width="480"></p>

<p>とりあえず今の設定はこんな感じ。</p>

<ul>
<li>US配列</li>
<li>SandS</li>
<li>かな -> Enter</li>
<li>英数 -> ESC</li>
<li>右Shift ->  ^と&amp;</li>
</ul>


<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-09.png" width="480"></p>

<p>さっきキーボードの設定でキーリピート弄ったけど、結局それでも遅くてこっちで設定した。</p>

<h2>AquaSKK</h2>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-10.png" width="480"></p>

<p>eskkがEnterで改行しないようにしてないと安定しないのでそれに合わせるのと、邪魔な現在の入力モード表示をOFF。</p>

<p><img src="http://hamaco.github.com/images/2012/06/setup-macbook-air-01-11.png" width="480"></p>

<p>補完はやっぱり欲しいのでON。</p>

<h1>まとめ</h1>

<p>システム環境設定は今の所こんな感じにしています。導入したアプリーケーションとかはある程度落ち着いたらその2とかでまとめます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CandyCaneでギャル文字]]></title>
    <link href="http://hamaco.github.com/blog/2012/06/14/candycane-gal/"/>
    <updated>2012-06-14T23:29:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/06/14/candycane-gal</id>
    <content type="html"><![CDATA[<p>最近ギャル文字が流行っているらしいのでCandyCaneでもギャル文字が使えるプラグイン作った。</p>

<blockquote><p><a href="https://github.com/hamaco/candycane-gal">hamaco/candycane-gal - GitHub</a></p>

<p><cite>http://github.com/hamaco/candycane-gal</cite></p></blockquote>

<h2>インストール</h2>

<p>まだ、CandyCaneのプラグイン一覧に登録されていないので以下の様な感じでgithubから持ってくる必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/hamaco/candycane-gal.git app/Plugin/CcGal</span></code></pre></td></tr></table></div></figure>


<p>インストールはこれで終わり。
これだけでチケットの説明やコメント等が全部ギャル文字になります。</p>

<h2>スクリーンショット</h2>

<p>参考までにギャル文字プラグインを入れる前と入れた後のスクリーンショットを貼っておきます。</p>

<h3>Before</h3>

<p><img src="http://hamaco.github.com/images/2012/06/candycane-gal-01.png" width="480"></p>

<h3>After</h3>

<p><img src="http://hamaco.github.com/images/2012/06/candycane-gal-02.png" width="480"></p>

<h2>参考サイト</h2>

<p><a href="http://mattn.kaoriya.net/software/vim/20120607224505.htm">Big Sky :: Vimでギャル文字</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CandyCaneのチケット作成での誤爆を防ぐプラグイン書いた]]></title>
    <link href="http://hamaco.github.com/blog/2012/06/11/candycane-enter-cancel/"/>
    <updated>2012-06-11T19:20:00+09:00</updated>
    <id>http://hamaco.github.com/blog/2012/06/11/candycane-enter-cancel</id>
    <content type="html"><![CDATA[<p>CandyCane でチケット作成してて、タイトルで Enter キーを連打して書きかけのチケットを作って、うがぁあああ、ってなったことありませんか？</p>

<p>私はありません。</p>

<p>ですがその様な人がいるかもしれないようなので、こんな悲しい思いを繰り返さないためのプラグインを作りました。</p>

<h2>ソースコード</h2>

<p><a href="https://github.com/hamaco/candycane-enter-cancel">hamaco/candycane-enter-cancel · GitHub</a></p>

<h2>謝罪</h2>

<p>すみません、このサイトのRedmineプラグインをパクりましたm(_ _)m</p>

<p><a href="http://d.hatena.ne.jp/suer/20120610/1339336133">Redmineのチケット作成での誤爆を防ぐプラグイン書いた - すえひろがりっっっっ!</a></p>
]]></content>
  </entry>
  
</feed>
